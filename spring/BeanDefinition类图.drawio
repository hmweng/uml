<mxfile host="app.diagrams.net" modified="2022-06-01T07:37:44.214Z" agent="5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.64 Safari/537.36" etag="u6ti5cfbY-iU5InR0tVV" version="18.2.0" type="github">
  <diagram id="ylnHAjVZKFytVAsGpEt1" name="第 1 页">
    <mxGraphModel dx="1183" dy="665" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="4qf6muTrts6Kvq2POUap-1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;span style=&quot;caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; font-size: 13px; font-weight: bold; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;AttributeAccessor&lt;/span&gt;&lt;/p&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; font-weight: bold; text-align: center; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;（接口定义了一个通用协定，用于将元数据附加到任意对象或从任意对象访问元数据）&lt;/div&gt;&lt;hr size=&quot;1&quot;&gt;&lt;p style=&quot;margin:0px;margin-left:4px;&quot;&gt;&lt;span style=&quot;caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; font-size: 13px; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;setAttribute(String, @Nullable Object) - 设置属性值&lt;/span&gt;&lt;/p&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;getAttribute(String name):Object - 根据名称获取值&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;removeAttribute(String name):Object - 根据名称删除值，如果有则返回该值&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;hasAttribute(String name):boolean - 根据名称判断是否含有该属性值&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;attributeNames():String[] - 返回所有属性值的name集合&lt;/div&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=12;fontFamily=Helvetica;html=1;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="200" y="40" width="410" height="180" as="geometry" />
        </mxCell>
        <mxCell id="4qf6muTrts6Kvq2POUap-2" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;fontFamily=Helvetica;fontSize=12;fontColor=default;" edge="1" parent="1" source="4qf6muTrts6Kvq2POUap-3" target="4qf6muTrts6Kvq2POUap-1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="4qf6muTrts6Kvq2POUap-3" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;span style=&quot;caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; font-size: 13px; font-weight: bold; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;BeanMetadataElement&lt;/span&gt;&lt;/p&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; font-weight: bold; text-align: center; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;实现该接口的实现类，获取该类的配置源对象&lt;/div&gt;&lt;hr size=&quot;1&quot;&gt;&lt;p style=&quot;margin:0px;margin-left:4px;&quot;&gt;&lt;span style=&quot;caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; font-size: 13px; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;getSource():Object - 返回此元数据元素的配置源对象&lt;/span&gt;&lt;br&gt;&lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=12;fontFamily=Helvetica;html=1;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="90" y="310" width="240" height="100" as="geometry" />
        </mxCell>
        <mxCell id="4qf6muTrts6Kvq2POUap-23" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;span style=&quot;caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; font-size: 13px; font-weight: bold; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;AttributeAccessorSupport&lt;/span&gt;&lt;/p&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; font-weight: bold; text-align: center; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;AttributeAccessors的Support类，提供所有方法的基本实现&lt;/div&gt;&lt;hr size=&quot;1&quot;&gt;&lt;p style=&quot;margin:0px;margin-left:4px;&quot;&gt;&lt;span style=&quot;caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; font-size: 13px; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;attributes:Map&amp;lt;String, Object&amp;gt;&amp;nbsp;&amp;nbsp;= new LinkedHashMap&amp;lt;&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;&gt;&lt;p style=&quot;margin:0px;margin-left:4px;&quot;&gt;&lt;span style=&quot;caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; font-size: 13px; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;重写了equals()与hashCode()方法&lt;/span&gt;&lt;br&gt;&lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=12;fontFamily=Helvetica;html=1;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="450" y="290" width="370" height="100" as="geometry" />
        </mxCell>
        <mxCell id="4qf6muTrts6Kvq2POUap-24" value="&lt;span style=&quot;caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; font-size: 13px; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;BeanDefinition(描述bean实例)&lt;/span&gt;" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=28;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;html=1;whiteSpace=wrap;autosize=1;" vertex="1" parent="1">
          <mxGeometry x="260" y="410" width="650" height="276" as="geometry" />
        </mxCell>
        <mxCell id="4qf6muTrts6Kvq2POUap-25" value="&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;静态常量定义：&lt;/div&gt;&lt;span style=&quot;caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; font-size: 13px; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;范围定义：SCOPE_SINGLETON，SCOPE_PROTOTYEP，以及其他定义；&lt;/span&gt;&lt;br style=&quot;caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; font-size: 13px; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;角色指示，数字类型，作用未知?&lt;/div&gt;" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;html=1;" vertex="1" parent="4qf6muTrts6Kvq2POUap-24">
          <mxGeometry y="28" width="650" height="62" as="geometry" />
        </mxCell>
        <mxCell id="4qf6muTrts6Kvq2POUap-26" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;html=1;" vertex="1" parent="4qf6muTrts6Kvq2POUap-24">
          <mxGeometry y="90" width="650" height="8" as="geometry" />
        </mxCell>
        <mxCell id="4qf6muTrts6Kvq2POUap-27" value="&lt;span style=&quot;caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; font-size: 13px; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;setParentName(@Nullable String) - 设置父Bean定义的名称&lt;/span&gt;&lt;br style=&quot;caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; font-size: 13px; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;getParentName():String - 获取父Bean定义的名称&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;setBeanClassName(Nullable String) - 设置Bean的class全类名&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;getBeanClassName():String - 获取Bean的class全类名，不一 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; --定只最终bean的类型，因为父bean定义，工厂方法类。&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;setScope(@Nullable String) - 设置新的范围名称&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;getScope():String - 获取当前的范围名称&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;setLazyInit(boolean lazyInit) - 设置是否懒加载&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;isLazyInit():boolean - 获取bean是否懒加载&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;setDependsOn(@Nullable String...) - 设置依赖的bean名称数组&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;getDependsOn():String[] - 获取依赖的bean名称数组&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;setAutowireCandidate(boolean) - 设置是否按照类型自动装备，不影响按照名称装配&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;isAutowireCandidate():boolean - 获取是否自动装配&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;setPrimary(boolean) - 设置是否是主要的bean，用于装配&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;isPrimary():boolean - 获取是否是主要bean的状态&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;setFactoryBeanName(@Nullable String) - 设置Bean工厂的类全名&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;getFactoryBeanName():String - 获取Bean工厂的类全名&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;setFactoryMethodName(@Nullable String) - 设置Bean工厂方法名称；将使用构造函数参数调用此方法。该方法将在指定的工厂bean（如果有）上调用，或者作为本地bean类上的静态方法调用。&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;getFactoryMethodName():String - 获取工厂方法名称&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;getConstructorArgumentValues():ConstructorArgumentValues --- 获取Bean的构造函数参数值&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;&lt;span style=&quot;font-size: inherit;&quot;&gt;hasConstructorArgumentValues():&lt;/span&gt;boolean - 是否有构造函数参数值&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;getPropertyValues():MutablePropertyValues - 获取用于bean创建的属性值&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;hasPropertyValues():boolean 判断是否有属性值&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;setInitMethodName(@Nullable String) - 设置初始化方法名&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;getInitMethodName():String - 获取初始化方法名&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;setDestroyMethodName(@Nullable String) - 设置销毁方法名&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;getDestroyMethodName():String - 获取销毁方法名&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;setRole(int) - 设置角色值&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;getRole():int - 获取角色值&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;setDescription(@Nullable String) - 设置该BeanDefinition的描述&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;getDescription():String&amp;nbsp;&amp;nbsp;- 获取描述&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;getResolvableType():ResolvableType - 获取泛型类型处理的实例对象&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;isSingleton():boolean - 是否是单例&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;isPrototype():boolean - 是否是原型&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;isAbstract():boolean 是否是抽象类&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;getResourceDescription():String&amp;nbsp;&amp;nbsp;- 返回此Bean定义所来自的资源的描述&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;resize: none; outline: none; font-size: 13px; caret-color: rgb(50, 50, 50); color: rgb(50, 50, 50); font-family: 微软雅黑; text-size-adjust: auto; background-color: rgba(255, 255, 255, 0.008);&quot;&gt;getOriginatingBeanDefinition():BeanDefinition&amp;nbsp;&amp;nbsp;- 返回原始的BeanDefinition&lt;/div&gt;" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;html=1;" vertex="1" parent="4qf6muTrts6Kvq2POUap-24">
          <mxGeometry y="98" width="650" height="178" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
